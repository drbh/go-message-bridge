package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"os/exec"
	"os/user"

	_ "github.com/mattn/go-sqlite3"
	"github.com/nlopes/slack"

	"bytes"
	"regexp"
	"strconv"
	"strings"
	"time"

	"net/http"

	"hash/fnv"

	"github.com/boltdb/bolt"
	"github.com/davecgh/go-spew/spew"

	"github.com/getlantern/systray"
	// "github.com/getlantern/systray/example/icon"
	"path/filepath"

	"github.com/skratchdot/open-golang/open"

	"github.com/zserge/webview"
)

const (
	windowWidth  = 960
	windowHeight = 640
)

func handleRPC(w webview.WebView, data string) {
	switch {
	case data == "yes":
		spew.Dump("yo")
	default:
		spew.Dump(data)
		return
	}
}

// Exists reports whether the named file or directory exists.
func Exists(name string) bool {
	usr, _ := user.Current()
	// fmt.Println(usr.HomeDir)

	if _, err := os.Stat(usr.HomeDir + name); err != nil {
		if os.IsNotExist(err) {
			return false
		}
	}
	return true
}

func schedule(what func(), delay time.Duration) chan bool {
	stop := make(chan bool)

	go func() {
		for {
			what()
			select {
			case <-time.After(delay):
			case <-stop:
				return
			}
		}
	}()

	return stop
}

func ConfigSet() {
	// fmt.Println("hello?")
	doesFolderExist := Exists("/Documents/MessageBridgeData")
	// fmt.Println(doesFolderExist)
	if doesFolderExist {
		// fmt.Println("Folder Does Exist")

		doesExist := Exists("/Documents/MessageBridgeData/credentials.json")
		if doesExist {
			fmt.Println("File Does Exist")
			// dir, err := os.Getwd()
			// if err != nil {
			// 	log.Fatal(err)
			// }

			spew.Dump(os.Args)

			configSet = true
			stop <- true

			close(stop)

		} else {

			// fmt.Println("File Doesn't Exist")
		}

	} else {
		usr, _ := user.Current()
		os.Mkdir(usr.HomeDir+"/Documents/MessageBridgeData", 0700)
		fmt.Println("Adding Folder")
		// fmt.Println("Folder Doesn't Exist")
	}

}

var USER_ID string
var BOT_ID string

// var BOT_NAME string
var BOT_TOKEN string
var USER_TOKEN string

var lastText string
var DATE_OFFSET int64
var lastGUID string
var seenMessageGuids = []string{}
var seenMessageGuid = map[string]bool{}

// var baseLoc = "/Users/davidholtz/Desktop/go-message-bridge/dend/"
var baseLoc string
var configBaseLoc string

type configOptions struct {
	// BOT_NAME   string `json:"bot_name"`
	BOT_ID     string `json:"bot_id"`
	USER_ID    string `json:"user_id"`
	BOT_TOKEN  string `json:"bot_token"`
	USER_TOKEN string `json:"user_token"`
}

func getConfig() {

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	type Payload struct {
		Text string `json:"text"`
	}

	datap := Payload{
		// fill struct
		configBaseLoc,
	}
	payloadBytes, err := json.Marshal(datap)
	if err != nil {
		// handle err
	}
	body := bytes.NewReader(payloadBytes)

	req, err := http.NewRequest("POST", "https://hooks.slack.com/services/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", body)
	if err != nil {
		// handle err
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		// handle err
	}
	defer resp.Body.Close()

	plan, _ := ioutil.ReadFile(configBaseLoc + "credentials.json")

	logger.Println(string(plan))
	var data configOptions
	json.Unmarshal([]byte(plan), &data)
	// BOT_NAME = data.BOT_NAME
	BOT_ID = data.BOT_ID
	USER_ID = data.USER_ID
	BOT_TOKEN = data.BOT_TOKEN
	USER_TOKEN = data.USER_TOKEN
}

func hash(s string) uint32 {
	h := fnv.New32a()
	h.Write([]byte(s))
	return h.Sum32()
}

func makeAppleTimestamp() int {
	DATE_OFFSET = 978307200 + 1
	return int((((time.Now().UnixNano()) / int64(time.Millisecond)) / 1000) - DATE_OFFSET)
}

func handleToChannel(handle string) string {
	db, err := bolt.Open(baseLoc+"my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	var v string
	db.Update(func(tx *bolt.Tx) error {
		b, err := tx.CreateBucketIfNotExists([]byte("TEST"))
		if err != nil {
			return err
		}
		v = string(b.Get([]byte(handle)))
		return nil
	})
	defer db.Close()
	return v
}
func setHandleToChannel(handle []byte, channel []byte) {
	db, err := bolt.Open(baseLoc+"my.db", 0600, nil)
	if err != nil {
		log.Fatal(err)
	}
	db.Update(func(tx *bolt.Tx) error {
		b, err := tx.CreateBucketIfNotExists([]byte("TEST"))
		if err != nil {
			return err
		}
		b.Put(handle, channel)
		return nil
	})
	defer db.Close()
}

func getMessages() {
	args := "?mode=ro&_mutex=no&_journal_mode=WAL&_query_only=1&_synchronous=2"

	usr, err := user.Current()
	if err != nil {
		log.Fatal(err)
	}

	logger.Println(usr.HomeDir)

	connectionString := usr.HomeDir + "/Library/Messages/chat.db" + args
	database, err := sql.Open("sqlite3", connectionString)
	defer database.Close()
	// logger.Println(database)
	if err != nil {
		log.Fatal("Connection Failed ", err)
	}
	// database.Exec("PRAGMA _ignore_check_constraints = 1")
	defer database.Close()

	database.SetMaxOpenConns(1)
	// database.Exec("PRAGMA journal_mode=WAL;")

	rows, qerr := database.Query(`
        SELECT
            guid as id,
            chat_identifier as recipientId,
            service_name as serviceName,
            room_name as roomName,
            display_name as displayName
        FROM chat
        JOIN chat_handle_join ON chat_handle_join.chat_id = chat.ROWID
        JOIN handle ON handle.ROWID = chat_handle_join.handle_id
        ORDER BY handle.rowid DESC
        LIMIT 10;
        `)
	// rows, qerr := database.Query("SELECT name FROM sqlite_master WHERE type='table';")
	defer rows.Close()
	if qerr != nil {
		log.Fatal("Query Failed ", qerr)
	}

	// logger.Println(rows)

	for rows.Next() {
		var id string
		var recipientId string
		var serviceName string
		var roomName string
		var displayName string
		rows.Scan(
			&id,
			&recipientId,
			&serviceName,
			&roomName,
			&displayName,
		)
		logger.Println(
			id,
			recipientId,
			serviceName,
			roomName,
			displayName,
		)
	}
}

func runPoller() {
	ticker := time.NewTicker(1000 * time.Millisecond)
	quit := make(chan struct{})

	go func() {
		for {
			select {
			case <-ticker.C:
				poll()
			case <-quit:
				ticker.Stop()
				return
			}
		}
	}()
}

func stringInSlice(a string, list []string) bool {
	for _, b := range list {
		if b == a {
			return true
		}
	}
	return false
}

func poll() {
	args := "?mode=ro&_mutex=no&_journal_mode=WAL&_query_only=1&_synchronous=2"
	usr, err := user.Current()
	if err != nil {
		log.Fatal(err)
	}

	// logger.Println(usr.HomeDir)

	connectionString := usr.HomeDir + "/Library/Messages/chat.db" + args
	database, err := sql.Open("sqlite3", connectionString)
	defer database.Close()
	// logger.Println(database)
	if err != nil {
		log.Fatal("Connection Failed ", err)
	}
	// database.Exec("PRAGMA _ignore_check_constraints = 1")
	defer database.Close()

	database.SetMaxOpenConns(1)
	// database.Exec("PRAGMA journal_mode=WAL;")
	latest_ := makeAppleTimestamp()
	latest := strconv.Itoa(latest_ - 1) // time.Now().UTC().String()

	// logger.Println(latest, latest_)
	rows, qerr := database.Query(`
			 SELECT
			    guid,
			    id as handle,
			    handle_id,
			    text,
			    date,
			    date_read,
			    is_from_me,
			    cache_roomnames
			FROM message
			LEFT OUTER JOIN handle ON message.handle_id = handle.ROWID
			WHERE date >= ` + latest + `
        `)
	// rows, qerr := database.Query("SELECT name FROM sqlite_master WHERE type='table';")
	defer rows.Close()
	if qerr != nil {
		log.Fatal("Query Failed ", qerr)
	}

	var guid string
	var handle string
	var handle_id string
	var text string
	var date string
	var date_read string
	var is_from_me string
	var cache_roomnames string

	for rows.Next() {
		rows.Scan(
			&guid,
			&handle,
			&handle_id,
			&text,
			&date,
			&date_read,
			&is_from_me,
			&cache_roomnames,
		)

		if seenMessageGuid[guid] {
			// fmt.Println("Seened: ", guid)

		} else {

			fmt.Println(guid)

			logger.Println(handle_id)

			theirChannel := handleToChannel(handle_id)
			var relative_channel string
			if theirChannel != "" {
				relative_channel = theirChannel
			} else {
				// make a new channel
				// userID := handle_id

				// // Make a Regex to say we only want
				// reg, err := regexp.Compile("[^a-zA-Z0-9]+")
				// if err != nil {
				// 	log.Fatal(err)
				// }
				// processedString := reg.ReplaceAllString(handle, "")

				// command := "osascript getContact.applescript " + processedString
				// logger.Println(command)
				// out, exr := exec.Command("sh", "-c", command).Output()
				// if exr != nil {
				// 	log.Fatal(exr)
				// }

				// names := strings.Split(string(out), `\n`)
				// logger.Println(names, len(names))

				pname := string(handle)

				// if len(names) > 0 {
				// 	if len(names[0]) > 4 {
				// 		pname = names[0]
				// 	}
				// }
				logger.Println("Prefered Name: ", pname, len(pname))

				channelID, err := user_API.CreateChannel(pname)
				if err != nil {
					logger.Printf("%s\n", err)
				}
				// take the channel name and handle and add to db
				logger.Println(channelID.ID)

				// auto add the bot to the channel!
				channelID2, errr := user_API.InviteUserToChannel(channelID.ID, BOT_ID)
				if errr != nil {
					logger.Printf("%s\n", errr)
				}

				logger.Println(channelID2)
				logger.Println(handle_id)

				relative_channel = channelID.ID

				setHandleToChannel([]byte(handle_id), []byte(channelID.ID))
				// setHandleToChannel([]byte(pname), []byte(channelID.ID))
				setHandleToChannel([]byte(channelID.ID+"-handle"), []byte(handle))
				// setHandleToChannel([]byte(channelID.ID+"-pname"), []byte(pname))
				// setHandleToChannel([]byte(channelID.ID), []byte(handle_id))
			}

			logger.Println(relative_channel)
			handleToChannel(handle_id)
			// THE PLACE WE GET THE SINGLE GOOD MESSAGE
			// de dep logic here
			if is_from_me == "1" {
				logger.Println(hash(text))
				logger.Println(hash(lastText))
				if hash(text) == hash(lastText) {
					logger.Println("DONT SEND MESSAGE")
					lastText = "reset"

				} else {
					logger.Println("SEND MESSAGE")

					global_rtm_2.SendMessage(global_rtm.NewOutgoingMessage(text, relative_channel))
				}
			} else {
				global_rtm.SendMessage(global_rtm_2.NewOutgoingMessage(text, relative_channel))
				// convo is with handle_id
			}

			logger.Println(guid, handle_id, handle, is_from_me, "\t\t\t\t\t", text, len(seenMessageGuid), len(seenMessageGuids))

			// fmt.Println("Add: ", guid)
			seenMessageGuid[guid] = true
			seenMessageGuids = append(seenMessageGuids, guid)
		}

		if len(seenMessageGuids) > 100 {
			key := seenMessageGuids[0]
			delete(seenMessageGuid, key)
			seenMessageGuids = append(seenMessageGuids[:0], seenMessageGuids[1:]...)
		}
	}
}

var global_rtm *slack.RTM
var global_rtm_2 *slack.RTM
var user_API *slack.Client

var logger *log.Logger
var stop chan bool
var configSet = false

// func web() {
// 	url := "http://talklby.com.s3-website-us-east-1.amazonaws.com"
// 	w := webview.New(webview.Settings{
// 		Width:                  windowWidth,
// 		Height:                 windowHeight,
// 		Title:                  "Message Bridge",
// 		Resizable:              true,
// 		URL:                    url,
// 		ExternalInvokeCallback: handleRPC,
// 	})
// 	w.SetColor(255, 255, 255, 255)
// 	defer w.Exit()
// 	w.Run()
// }

func onReady() {

	usr, _ := user.Current()
	configBaseLoc = usr.HomeDir + "/Documents/MessageBridgeData/"

	dir, errxx := filepath.Abs(filepath.Dir(os.Args[0]))
	if errxx != nil {
		log.Fatal(errxx)
	}

	dir = strings.TrimSuffix(dir, "MacOS")

	baseLoc = dir + "Resources/"

	if baseLoc[0:4] == "/var" {
		fmt.Println("switching to dev DB will be saved in ~/Documents/MessageBridgeData")
		baseLoc = configBaseLoc
	}

	fmt.Println(baseLoc)

	ping := func() { ConfigSet() }

	stop = schedule(ping, 400*time.Millisecond)

	var visable = false

	mInstructions := systray.AddMenuItem("Instructions", "Instructions")
	mWebUI := systray.AddMenuItem("Sign In", "Sign In Beta")
	mQuit := systray.AddMenuItem("Exit", "Quit the whole app")

	go func() {
		for {
			select {
			case <-mInstructions.ClickedCh:
				open.Run("https://github.com/drbh/go-message-bridge")

			case <-mWebUI.ClickedCh:
				baseLoc = "/Users/drbh2/Desktop/go-message-bridge/dist/"
				fmt.Println("\nRUNWEB", baseLoc+"minimal")
				yout, _ := exec.Command("sh", "-c", baseLoc+"minimal").Output()

				fmt.Println(yout)

			case <-mQuit.ClickedCh:
				systray.Quit()
				fmt.Println("Quit2 now...")
				return
			}
		}
	}()

	for {
		time.Sleep(1500 * time.Millisecond)
		if configSet {
			fmt.Println("Found File")
			break
		} else {
			if visable == false {
				fmt.Println(baseLoc + "minimal")
				systray.SetTitle("Please Configure App")
				systray.SetTooltip("Setup your credentials please")
				visable = true
			}
			// fmt.Println("Keep Checking")
		}
	}
	fmt.Println("Done")

	// if visable {
	mInstructions.Hide()
	mWebUI.Hide()
	mQuit.Hide()
	// }

	onReadyComplete()

}

var quit = make(chan bool)

var isNotRunning = true

func onReadyComplete() {

	// systray.SetIcon(icon.Data)
	systray.SetTitle("Message Bridge")
	// systray.SetTooltip("Lantern")
	// mQuitOrig := systray.AddMenuItem("Quit", "Quit the whole app")
	// go func() {
	// 	<-mQuitOrig.ClickedCh
	// 	fmt.Println("Requesting quit")
	// 	systray.Quit()
	// 	fmt.Println("Finished quitting")
	// }()

	// We can manipulate the systray in other goroutines
	go func() {
		// systray.SetIcon(icon.Data)
		systray.SetTitle("MB")
		systray.SetTooltip("Slack to Messages")
		// mChange := systray.AddMenuItem("Change Me", "Change Me")
		// mChecked := systray.AddMenuItem("Unchecked", "Check Me")
		mEnabled := systray.AddMenuItem("▶ Start", "Enabled")
		// systray.AddMenuItem("Ignored", "Ignored")
		mUrl := systray.AddMenuItem("Get Info", "my home")

		// Sets the icon of a menu item. Only available on Mac.
		// mQuit.SetIcon(icon.Data)

		systray.AddSeparator()
		systray.AddMenuItem("Slack: Channel Name", "").Disable()
		systray.AddMenuItem("iMessage: Account Name", "").Disable()

		systray.AddSeparator()
		mSignOut := systray.AddMenuItem("Sign Out", "Sign out Slack")
		mQuit := systray.AddMenuItem("Exit", "Quit the whole app")

		// shown := true
		for {
			select {
			// case <-mChange.ClickedCh:
			// 	mChange.SetTitle("I've Changed")
			// case <-mChecked.ClickedCh:
			// 	if mChecked.Checked() {
			// 		mChecked.Uncheck()
			// 		mChecked.SetTitle("Unchecked")
			// 	} else {
			// 		mChecked.Check()
			// 		mChecked.SetTitle("Checked")
			// 	}
			case <-mEnabled.ClickedCh:
				fmt.Println("Was Clicked")
				spew.Dump(mEnabled)

				if isNotRunning {
					fmt.Println("is starting")

					systray.SetTitle("MB 🏃")
					mEnabled.SetTitle("▮▮ Stop")

					go func() {
						for {
							select {
							case <-quit:
								return
							default:
								runApp()
								// Do other stuff
							}
						}
					}()
					isNotRunning = false
					// application = go runApp()
					// mEnabled.Disable()
				} else {

					fmt.Println("is ending")
					systray.SetTitle("MB")
					mEnabled.SetTitle("▶ Start")

					global_rtm.Disconnect()
					global_rtm_2.Disconnect()
					// quit <- true
					isNotRunning = true

					// mEnabled.Enable()
				}

			case <-mUrl.ClickedCh:
				open.Run("https://github.com/drbh/go-message-bridge")
			// case <-mToggle.ClickedCh:
			// 	if shown {
			// 		// mQuitOrig.Hide()
			// 		mEnabled.Hide()
			// 		shown = false
			// 	} else {
			// 		// mQuitOrig.Show()
			// 		mEnabled.Show()
			// 		shown = true
			// 	}
			case <-mSignOut.ClickedCh:
				systray.Quit()
				fmt.Println("Quit2 now...")

			case <-mQuit.ClickedCh:
				systray.Quit()
				fmt.Println("Quit2 now...")
				return
			}
		}
	}()
}

func main() {

	onExit := func() {

		// onExit2 := func() {
		// 	fmt.Println("Finished onExit")
		// }

		// systray.Run(onReady, onExit2)
		// fmt.Println("Starting onExit")
		// now := time.Now()
		// ioutil.WriteFile(fmt.Sprintf(`on_exit_%d.txt`, now.UnixNano()), []byte(now.String()), 0644)
		fmt.Println("Finished onExit")
	}
	// Should be called at the very beginning of main().
	systray.Run(onReady, onExit)

}

func runApp() {
	f, err := os.OpenFile(configBaseLoc+"text.log",
		os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Println(err)
	}
	defer f.Close()

	logger = log.New(f, "        ", log.LstdFlags)

	getConfig()
	runPoller()

	api := slack.New(
		BOT_TOKEN,
		slack.OptionDebug(false),
		slack.OptionLog(log.New(os.Stdout, "slack-bot: ", log.Lshortfile|log.LstdFlags)),
	)

	rtm := api.NewRTM()
	global_rtm = rtm
	go rtm.ManageConnection()

	api2 := slack.New(
		USER_TOKEN,
		slack.OptionDebug(false),
		slack.OptionLog(log.New(os.Stdout, "slack-bot-2: ", log.Lshortfile|log.LstdFlags)),
	)

	rtm2 := api2.NewRTM()
	user_API = api2

	users, _ := user_API.GetUsers()

	// lets fetch the users id and bots id on startup
	for i := 0; i < len(users); i++ {
		// spew.Dump(users[i])

		logger.Println(users[i].Name, users[i].ID, users[i].RealName)

		// if users[i].IsPrimaryOwner && users[i].IsAdmin {
		// 	USER_ID = users[i].ID
		// 	logger.Println("USR: ", USER_ID)
		// }

		// if users[i].Name == BOT_NAME && users[i].IsBot {
		// 	BOT_ID = users[i].ID
		// 	logger.Println("BOT: ", BOT_ID)
		// }

		// logger.Println(users[i].ID, users[i].Name, users[i].IsBot, users[i].IsAdmin, users[i].IsPrimaryOwner)
	}
	logger.Println("USR: ", USER_ID)
	logger.Println("BOT: ", BOT_ID)

	global_rtm_2 = rtm2
	go rtm2.ManageConnection()

	for msg := range rtm2.IncomingEvents {
		//
		switch ev := msg.Data.(type) {
		case *slack.HelloEvent:
			// Ignore hello

		case *slack.ConnectedEvent:
			logger.Println("Infos:", ev.Info)
			logger.Println("Connection counter:", ev.ConnectionCount)

		case *slack.MessageEvent:
			handle := handleToChannel(ev.Channel + "-handle")
			logger.Println(handle)
			if ev.Type == "message" {

				localImageURL := ""
				if len(ev.Files) > 0 {
					spew.Dump(msg)
					url := ev.Files[0].URLPrivateDownload
					localImageURL = configBaseLoc + ev.Files[0].Name

					req, _ := http.NewRequest("GET", url, nil)
					req.Header.Add("authorization", "Bearer "+USER_TOKEN)

					res, _ := http.DefaultClient.Do(req)

					defer res.Body.Close()
					body, _ := ioutil.ReadAll(res.Body)

					// fmt.Println(res)

					// write the whole body at once
					fmt.Println("Download image to local")
					err = ioutil.WriteFile(localImageURL, body, 0644)
					if err != nil {
						panic(err)
					}
					// jpeg.Encode(f, body, nil)
					// fmt.Println(string(body))
				}

				if ev.User != BOT_ID {
					// if ev.User == USER_ID {

					isUserAdd := false
					if len(ev.Text) > 0 {
						fmt.Println(ev.Text[0:2])
						if ev.Text[0:2] != "<@" {
							isUserAdd = true
						}
					}

					if isUserAdd == false {
						lastText = ev.Text
						if len(handle) > 1 {
							logger.Println("Should send iMessage to")
							command := "osascript " + baseLoc + "sendMessage.applescript " + handle + " \"" + ev.Text + "\""
							logger.Println(command)
							out, _ := exec.Command("sh", "-c", command).Output()

							logger.Println(out)
						}
						lastText = ev.Text

						if len(ev.Text) == 0 {
							logger.Println("Should send Image to")
							command := "osascript " + baseLoc + "sendImageMessage.applescript " + handle + " \"" + localImageURL + "\""
							logger.Println(command)
							out, _ := exec.Command("sh", "-c", command).Output()

							logger.Println(out)
						}
					}
				}
			}
			logger.Printf("Message: %v\n", ev)

		case *slack.PresenceChangeEvent:
			logger.Printf("Presence Change: %v\n", ev)

		case *slack.LatencyReport:
			logger.Printf("Current latency: %v\n", ev.Value)

		case *slack.RTMError:
			logger.Printf("Error: %s\n", ev.Error())

		case *slack.ChannelCreatedEvent:
			logger.Println("ADDED A NEW CHANNEL")
			re := regexp.MustCompile("[0-9]+")
			numbers := re.FindAllString(ev.Channel.Name, -1)
			pnum := strings.Join(numbers[:], "")

			handle := handleToChannel(pnum)
			fmt.Println(handle)

			if len(handle) < 1 {
				// auto add the bot to the channel!
				channelID2, errr := user_API.InviteUserToChannel(ev.Channel.ID, BOT_ID)
				if errr != nil {
					logger.Printf("%s\n", errr)
				}

				logger.Println(channelID2)

				setHandleToChannel([]byte(pnum), []byte(ev.Channel.ID))
				setHandleToChannel([]byte(ev.Channel.ID+"-handle"), []byte(pnum))
			} else {
				fmt.Println("This number already exists!")
				fmt.Println("This number already exists!")
			}

		case *slack.InvalidAuthEvent:
			logger.Printf("Invalid credentials")
			return

		default:
			if msg.Type == "connecting" {

			} else if msg.Type == "channel_joined" {
				logger.Println("CHANNEL JOINED")
				// spew.Dump(msg)

			} else {
				// Ignore other events..
				logger.Printf("Unexpected: %v\n", msg.Data)
				// spew.Dump(msg)
				// os.Exit(3)
			}
		}
	}

	for msg := range rtm.IncomingEvents {
		// logger.Print("Event Received: ")
		switch ev := msg.Data.(type) {
		case *slack.HelloEvent:
			// Ignore hello

		case *slack.ConnectedEvent:
			logger.Println("Infos:", ev.Info)
			logger.Println("Connection counter:", ev.ConnectionCount)
			// Replace C2147483705 with your Channel ID
			// rtm.SendMessage(rtm.NewOutgoingMessage("Hello world", "DC7EXT3RT"))

		case *slack.MessageEvent:
			logger.Printf("Message: %v\n", ev)

		case *slack.PresenceChangeEvent:
			logger.Printf("Presence Change: %v\n", ev)

		case *slack.LatencyReport:
			logger.Printf("Current latency: %v\n", ev.Value)

		case *slack.RTMError:
			logger.Printf("Error: %s\n", ev.Error())

		case *slack.InvalidAuthEvent:
			logger.Printf("Invalid credentials")
			return

		default:
			if msg.Type == "connecting" {

			} else {
				// Ignore other events..
				logger.Printf("Unexpected: %v\n", msg.Data)
				// spew.Dump(msg)
				// os.Exit(3)
			}

		}
	}
	time.Sleep(5 * time.Hour)

}
